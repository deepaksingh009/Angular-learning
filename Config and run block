A module is a collection of configuration and run blocks which get applied to the application during the bootstrap process. 
In its simplest form the module consists of a collection of two kinds of blocks:

Configuration blocks -Only providers and constants can be injected into configuration blocks. 
This is to prevent accidental instantiation of services before they have been fully configured.


angular.module('module', [])
.config(['$httpProvider','$locationProvider','$routeProvider','$provider','cookieProvider','constant',
function ($httpProvider,$locationProvider,$routeProvider,$provider,cookieProvider,constant) {
// provider-injector
// This is an example of config block.
// You can have as many of these as you want.
// You can only inject Providers (not instances)
// into config blocks.
}])


Look at the following provider, which we can use in our application:

1.) $httpProvider:Use $httpProvider to change the default behavior of the $http service.
There are two type of properties for $httpProvider:

Default-:

defaults.cache - {boolean|Object} - A boolean value or object created with $cacheFactory to enable or disable caching of HTTP responses by default. See $http Caching for more information.

defaults.headers - {Object} - Default headers for all $http requests. Refer to $http for documentation on setting default headers.

defaults.headers.common
defaults.headers.post
defaults.headers.put
defaults.headers.patch

interceptors:-For purposes of global error handling, authentication, or any kind of synchronous or asynchronous pre-processing of 
request or postprocessing of responses, it is desirable to be able to intercept requests before they are handed to the server and 
responses before they are handed over to the application code that initiated these requests. The interceptors leverage the promise 
APIs to fulfill this need for both synchronous and asynchronous pre-processing.




2.) $locationProvider
3.) $routeProvider
4.) $provider
5.) User defined Provider
6.) Constant


Run blocks - get executed after the injector is created and are used to kickstart the application. 
Only instances and constants can be injected into run blocks. 
This is to prevent further system configuration during application run time.
